package ch.bailu.aat_lib.resources;
/**
    This file was generated by 'ci/util/generate_strings.py'.
*/
public class Strings {
    public String app_name() { return "AAT";}

    public String on() { return "On";}

    public String off() { return "Off";}

    public String auto() { return "Auto";}

    public String none() { return "None";}

    public String all() { return "All";}

    public String enter() { return "Enter…";}

    public String pick() { return "Pick (SAF)…";}

    public String ok() { return "OK";}

    public String cancel() { return "Cancel";}

    public String files() { return "Files";}

    public String gps() { return "GPS";}

    public String gps_wait() { return "…";}

    public String gps_nogps() { return "No";}

    public String gps_noaccess() { return "Denied";}

    public String tracker() { return "Tracker";}

    public String tracker_start() { return "Start";}

    public String tracker_pause() { return "Pause";}

    public String tracker_stop() { return "Stop";}

    public String tracker_resume() { return "Resume";}

    public String tracker_restore() { return "Restore track";}

    public String status_paused() { return "Paused";}

    public String status_autopaused() { return "A-Paused";}

    public String sensors() { return "Sensors";}

    public String sensor_type_internal() { return "Internal";}

    public String sensor_type_bluetooth() { return "Bluetooth";}

    public String sensor_bl_enabled() { return "Bluetooth is enabled";}

    public String sensor_bl_scanning() { return "Scanning for Bluetooth sensors…";}

    public String sensor_bl_disabled() { return "Bluetooth is disabled";}

    public String sensor_state_unscanned() { return "Unscanned";}

    public String sensor_state_scanning() { return "Scanning…";}

    public String sensor_state_supported() { return "Supported";}

    public String sensor_state_not_supported() { return "Not supported";}

    public String sensor_state_not_connected() { return "Not connected";}

    public String sensor_state_connecting() { return "Connecting…";}

    public String sensor_state_connected() { return "Connected";}

    public String sensor_scan() { return "Scan for BluetoothLE sensors…";}

    public String sensor_connect() { return "Connect to enabled sensors…";}

    public String sensor_heart_rate() { return "Heart rate";}

    public String sensor_heart_beats() { return "Heart beats";}

    public String sensor_heart_beats_unit() { return "Beats";}

    public String sensor_speed() { return "Speed";}

    public String sensor_barometer() { return "Barometer";}

    public String sensor_step_counter() { return "Step counter";}

    public String sensor_step_rate() { return "Steprate";}

    public String sensor_step_rate_unit() { return "spm";}

    public String sensor_step_total() { return "Total steps";}

    public String sensor_step_total_unit() { return "Steps";}

    public String sensor_cadence() { return "Cadence";}

    public String sensor_cadence_total() { return "Crank rotations";}

    public String sensor_cadence_total_unit() { return "Rotations";}

    public String sensor_power() { return "Power";}

    public String intro_about() { return "About";}

    public String intro_readme() { return "README";}

    public String intro_documentation() { return "Documentation";}

    public String intro_cockpit_a() { return "Cockpit A";}

    public String intro_cockpit_b() { return "Cockpit B";}

    public String intro_map() { return "Map";}

    public String intro_nominatim() { return "Map Search";}

    public String intro_overlay_list() { return "Overlay list";}

    public String intro_list() { return "Track list";}

    public String intro_external_list() { return "External files";}

    public String intro_settings() { return "Preferences";}

    public String label_summary() { return "Summary";}

    public String label_filter() { return "Filter";}

    public String label_list() { return "List";}

    public String filter_geo() { return "Inside bounding";}

    public String filter_date_start() { return "Start date";}

    public String filter_date_to() { return "End date";}

    public String query_overpass() { return "Overpass";}

    public String query_features() { return "OSM Features";}

    public String query_save_copy() { return "Save copy";}

    public String p_general() { return "General";}

    public String p_post_autopause() { return "Postprocessed autopause";}

    public String p_preset_slots() { return "Visible presets";}

    public String p_unit_title() { return "Units";}

    public String p_messages() { return "Status Messages";}

    public String p_messages_size() { return "Download size";}

    public String p_messages_url() { return "URL";}

    public String p_messages_file() { return "URL and file";}

    public String p_location_provider() { return "Location provider";}

    public String p_location_provider_permission() { return "No permission to access GPS";}

    public String p_location_gps() { return "System GPS";}

    public String p_location_gpsnet() { return "System GPS and network";}

    public String p_location_network() { return "Network only";}

    public String p_location_mock() { return "Mock location";}

    public String p_directory_data() { return "Data directory";}

    public String p_cache_size() { return "Internal cache size";}

    public String p_fix_gps() { return "Fix GPS time";}

    public String p_fix_correct() { return "GPS time is correct (in UTC)";}

    public String p_fix_differs() { return "Hours GPS differs from system time:";}

    public String p_adjust_altitude() { return "Adjust GPS altitude";}

    public String p_adjust_altitude_by() { return "Adjust GPS altitude by…";}

    public String p_set_altitude() { return "Set altitude";}

    public String p_pressure_sealevel() { return "Pressure at sealevel [hPa]";}

    public String p_overlay() { return "Overlays";}

    public String p_legend_fulldistance() { return "Distance continuous";}

    public String p_goto_location() { return "Center map at location (WGS84 decimal or Open Location Code)";}

    public String p_goto_location_hint() { return "Supports WGS84 decimal, CH1903 and Open Location Code (Plus Code)";}

    public String p_preset() { return "Activity";}

    public String p_met() { return "MET and name";}

    public String p_autopause() { return "Autopause";}

    public String p_tracker_autopause() { return "Set tracker to autopause";}

    public String p_weight_title() { return "Your weight in kg";}

    public String p_backlight_title() { return "Backlight";}

    public String p_backlight_off() { return "System default";}

    public String p_backlight_on() { return "Keep on";}

    public String p_backlight_on_no_lock() { return "Keep on (disable lock screen)";}

    public String p_system() { return "System";}

    public String p_tile_size() { return "Tile size";}

    public String p_accuracy_filter() { return "Accuracy filter";}

    public String p_distance_filter() { return "Distance filter";}

    public String p_missing_trigger() { return "Missing trigger";}

    public String p_map() { return "Map";}

    public String p_offline_map() { return "Offline map";}

    public String p_mapsforge_directory() { return "Offline maps directory";}

    public String p_mapsforge_theme() { return "Offline map theme";}

    public String p_enable_cache() { return "Enable cache";}

    public String p_directory_tiles() { return "Tile cache directory";}

    public String p_use_volume_keys() { return "Use volume buttons for map zoom";}

    public String p_render_threads() { return "Renderer threads";}

    public String p_mapsforge_poi() { return "Offline POI";}

    public String p_mapsforge_poi_db() { return "Offline POI database";}

    public String p_trim_cache() { return "Trim tile cache";}

    public String p_tiles() { return "Map";}

    public String p_trim_mode() { return "Trim mode";}

    public String p_trim_size() { return "Trim size";}

    public String p_trim_age() { return "Trim age";}

    public String p_trim_month() { return "Month";}

    public String p_trim_months() { return "Months";}

    public String p_trim_year() { return "Year";}

    public String p_trim_years() { return "Years";}

    public String p_trim_days() { return "Days";}

    public String p_trim_total() { return "Total";}

    public String p_remove_all() { return "Clear entire cache";}

    public String p_remove_all_in() { return "Clear entire cache in";}

    public String p_remove_old() { return "Remove old tiles";}

    public String p_remove_old_in() { return "Remove old tiles in";}

    public String file_reload() { return "Reload preview";}

    public String file_delete() { return "Delete file";}

    public String file_rename() { return "Rename file";}

    public String file_overlay() { return "Use as overlay";}

    public String file_mock() { return "Use for mock location";}

    public String file_delete_ask() { return "Delete file?";}

    public String file_send() { return "Send…";}

    public String file_view() { return "View/Edit…";}

    public String file_copy() { return "Copy to…";}

    public String file_exists() { return "\u0020already exists!";}

    public String file_is_writeable() { return "\u0020is writeable.";}

    public String file_is_writeonly() { return "\u0020is writeonly.";}

    public String file_is_readonly() { return "\u0020is readonly.";}

    public String file_is_missing() { return "\u0020does not exist.";}

    public String file_is_denied() { return "\u0020is not accessible.";}

    public String edit_load() { return "Tap here to load file into editor";}

    public String edit_save() { return "Save";}

    public String edit_save_copy() { return "Save copy";}

    public String edit_save_copy_to() { return "Save copy to …";}

    public String edit_inverse() { return "Inverse";}

    public String edit_change_type() { return "Set GPX type";}

    public String edit_simplify() { return "Simplify";}

    public String edit_attach() { return "Attach file";}

    public String edit_fix() { return "Fix";}

    public String edit_clear() { return "Clear all";}

    public String edit_cut_remaining() { return "Cut remaining";}

    public String edit_cut_preceding() { return "Cut preceding";}

    public String location_title() { return "Center location";}

    public String location_view() { return "View location…";}

    public String location_send() { return "Send location…";}

    public String clipboard_copy() { return "\u21d2 Clipboard";}

    public String clipboard_paste() { return "\u21d0 Clipboard";}

    public String dialog_yes() { return "Yes";}

    public String dialog_no() { return "No";}

    public String dialog_ok() { return "OK";}

    public String dialog_cancel() { return "Cancel";}

    public String dialog_discard() { return "Discard";}

    public String dialog_save() { return "Save";}

    public String dialog_modified() { return "File has been modified";}

    public String d_longitude() { return "Longitude";}

    public String d_latitude() { return "Latitude";}

    public String d_chx() { return "CH1903 X";}

    public String d_chy() { return "CH1903 Y";}

    public String d_name() { return "Name";}

    public String d_accuracy() { return "Accuracy";}

    public String d_enddate() { return "End";}

    public String d_startdate() { return "Start";}

    public String d_acceleration() { return "Acceleration";}

    public String d_bearing() { return "Bearing";}

    public String d_path() { return "Path";}

    public String d_state() { return "State";}

    public String d_size() { return "Size";}

    public String d_ascend() { return "Climb";}

    public String d_descend() { return "Descend";}

    public String d_slope() { return "Slope";}

    public String pause() { return "Pause";}

    public String pause_ap() { return "Pause (with autopause)";}

    public String speed() { return "Speed";}

    public String average() { return "Average";}

    public String average_ap() { return "Average (without pauses)";}

    public String maximum() { return "Maximum";}

    public String distance() { return "Distance";}

    public String distance_ap() { return "Distance (without pauses)";}

    public String altitude() { return "Altitude";}

    public String time() { return "Total time";}

    public String time_ap() { return "Total time (without pauses)";}

    public String calories() { return "Calories";}

    public String name() { return "Name";}

    public String pace() { return "Pace";}

    public String pace_ap() { return "Pace (without pauses)";}

    public String tt_edit_add() { return "Add a point with the location the map is centered to.";}

    public String tt_edit_remove() { return "Remove selected point.";}

    public String tt_edit_up() { return "Move point one up in order.";}

    public String tt_edit_down() { return "Move point one down in order.";}

    public String tt_edit_redo() { return "Redo last undone action..";}

    public String tt_edit_undo() { return "Undo last action.";}

    public String tt_info_grid() { return "Switch between grid modes.";}

    public String tt_info_legend() { return "Switch between track legend modes.";}

    public String tt_info_nominatim() { return "Search with OSM-Nominatim.";}

    public String tt_info_reload() { return "Reload visible tiles.";}

    public String tt_info_location() { return "Import/export of center location.";}

    public String tt_map_zoomin() { return "Zoom into map.";}

    public String tt_map_zoomout() { return "Zoom out of map.";}

    public String tt_map_home() { return "Lock center of map to your currently known location.";}

    public String tt_map_frame() { return "Switch between GPX-Overlays and frame them.";}

    public String tt_map_edges() { return "Tap edges for more functionality";}

    public String tt_nominatim_query() { return "Start search.";}

    public String tt_nominatim_clear() { return "Clear line in search text.";}

    public String tt_cockpit_a() { return "Fullscreen";}

    public String tt_cockpit_b() { return "Splitscreen";}

    public String tt_menu_file() { return "Display file operation menu.";}

    public String tt_p_preset_slots() { return "Number of directories and presets you want to use to organize tracks.";}

    public String tt_p_distance_filter() { return "Only log a GPS sample if it has a minimal distance from the last sample.";}

    public String tt_p_accuracy_filter() { return "Only log a GPS sample if it has a minimal accuracy.";}

    public String tt_p_missing_trigger() { return "Set tracker to auto-pause if the GPS signal is lost for a certain period.";}

    public String error_integer() { return "Wrong input, only integers are allowed.\n\"%s\"";}

    public String error_integer_positive() { return "Weight must be between 1 and 999.";}

    public String error_long() { return "Wrong input, only numbers are allowed.\n\"%s\"";}

    public String error_no_map_file() { return "No map files found at ";}

    public String error_met() { return "First Number must be between 0.0 to 20.0, followed by a space.";}

    public String[] p_unit_list() {
        return new String[] {
            "Metric (km, km/h)",
            "Imperial (mi, mph)",
            "Nautical (nm, kn)",
            "International System of Units",
        };
    }

    public String[] p_met_list() {
        return new String[] {
            " 6.8 bicycling, leisure, moderate effort",
            " 8.5 bicycling, mountain, general",
            " 7.0 jogging, general",
            " 6.0 hiking, cross country",
            " 2.0 test",
            "14.0 bicycling, mountain, uphill",
            "16.0 bicycling, mountain, competitive",
            " 5.8 bicycling, leisure, light effort",
            "10.0 bicycling, racing or leisure, vigorous effort",
            " 6.0 running, 4 mph (13 min/mile)",
            " 9.0 running, 5.2 mph (11.5 min/mile)",
            " 9.8 running, 6 mph (10 min/mile)",
            " 9.0 running, cross country",
            "10.0 running, on a track, team practice",
            " 8.0 running, training, pushing a wheelchair or baby carrier",
            "13.3 running, marathon",
            " 7.8 backpacking, hiking or organized walking with a daypack",
            " 7.3 climbing hills with 10 to 20 lb load",
            " 8.3 climbing hills with 21 to 42 lb load",
            " 9.0 climbing hills with 42+ lb load",
            " 5.3 hiking or walking at a normal pace through fields and hillsides",
            " 6.5 race walking",
            " 8.0 rock or mountain climbing",
            " 2.0 walking, strolling, very slow",
            " 3.5 walking for pleasure",
            " 3.0 walking the dog",
            " 4.8 walking, for exercise, 3.5 to 4 mph, with ski poles, Nordic walking, level, moderate pace",
            " 6.8 walking, for exercise, with ski poles, Nordic walking, uphill",
        };
    }

    public String[] p_trim_modes() {
        return new String[] {
            "Size",
            "Size and age",
            "Age",
            "Size or age",
        };
    }

}