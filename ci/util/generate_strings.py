#!/usr/bin/env python3

'''
Generate Java string classes from Android xml string resources
'''

import sys
import xml.etree.ElementTree as ET

if len(sys.argv) > 1:
    LANG_PATH = 'values-'   + sys.argv[1] + '/'
    CLASS_NAME = 'Strings_' + sys.argv[1] + ' extends Strings'
    OVERRIDE = '    @Override\n'
    OUT_FILE = 'Strings_' + sys.argv[1] + '.java'
else:
    LANG_PATH = 'values/'
    CLASS_NAME = 'Strings'
    OVERRIDE = ''
    OUT_FILE = 'Strings.java'


INPUT_FILE = '../../aat-android/src/main/res/' + LANG_PATH + 'strings.xml'
OUTPUT_FILE = '../../aat-lib/src/main/java/ch/bailu/aat_lib/resources/' + OUT_FILE

JAVA_HEADER = """package ch.bailu.aat_lib.resources;
/**
    This file was generated by 'ci/util/generate_strings.py'.
*/
"""

print("generate " + OUTPUT_FILE + " from " + INPUT_FILE)

with open(OUTPUT_FILE, "w", encoding="utf-8") as out:
    out.write(JAVA_HEADER)
    out.write('public class ' + CLASS_NAME + ' {\n')

    root_node = ET.parse(INPUT_FILE).getroot()

    for tag in root_node.findall('string'):
        key = tag.get('name')
        value = tag.text

        out.write(OVERRIDE)
        out.write('    public String ' + key + '() { return "' + value + '";}\n\n')

    for array_tag in root_node.findall('string-array'):
        out.write(OVERRIDE)
        out.write('    public String[] ' + array_tag.get('name') + '() {\n')
        out.write('        return new String[] {\n')

        for tag in array_tag.findall('item'):
            out.write('            "' + tag.text + '",\n')

        out.write('        };\n')
        out.write('    }\n\n')

    out.write("}")
