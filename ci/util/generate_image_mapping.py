#!/usr/bin/env python3

'''
Generate Java class with string to symbol id mapping. This is used by Android to
access images with resource ids instead of names.
'''

from os.path import exists

input_file_release = '../../aat-android/build/intermediates/runtime_symbol_list/release/R.txt'
input_file = '../../aat-android/build/intermediates/runtime_symbol_list/debug/R.txt'
output_file = '../../aat-android/src/main/java/ch/bailu/aat/resource/Images.java'

if exists(input_file_release):
    input_file = input_file_release

if exists(input_file):
    print(f"Generate '{output_file}' from '{input_file}'")
else:
    print("No 'R.txt' found. Cannot generate image resource mapping")
    exit()


with open(input_file, 'r', encoding="utf-8") as in_file:
    with open(output_file, 'w', encoding="utf-8") as out_file:

        lines = in_file.readlines()

        out_file.write('/**\n')
        out_file.write('    This file was generated by \'ci/util/generate_img.py\'\n')
        out_file.write('*/\n')
        out_file.write('package ch.bailu.aat.resource;\n\n\n')
        out_file.write('import ch.bailu.aat.R;\n\n')
        out_file.write('public final class Images {\n')

        out_file.write('    public static int get(String name) {\n')
        out_file.write('        switch(name) {\n')

        count = 0
        for line in lines:
            count += 1
            words = line.split()

            if len(words) > 3:
                t = words[1]

                if words[1] == "drawable":
                    name = words[2]
                    number = words[3]

                    print(f"{count}: {name}, {number}")

                    out_file.write('            case "' + name + '":\n')
                    out_file.write('                return R.drawable.' + name + ';\n')

        out_file.write('        }\n')
        out_file.write('        return 0;\n')
        out_file.write('    }\n')
        out_file.write('}\n')
