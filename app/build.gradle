apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

android {
    compileSdkVersion 28


    defaultConfig {

        applicationId "ch.bailu.aat"

        minSdkVersion 14
        targetSdkVersion 28

        versionCode 25
        versionName "v1.14.1"

        resValue "string", "app_sname", "AAT"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            resValue "string", "app_sname", "AAT.debug"
            applicationIdSuffix = ".debug"
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError true
        lintConfig file ("${project.rootDir}/app/config/lint/lintconf.xml")
        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }
}
//Inserimento task per checkstyle
task checkstyle(type: Checkstyle) {
    configFile = rootProject.file('app/config/checkstyle/checkstyleEsteso.xml')
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    // empty classpath
    classpath = files()

    showViolations true

    reports {
        xml.enabled false
        html.enabled true
    }
    //inserimento prebuild per far in modo che l'esecuzione del
    // task avvenga per ogni build
    // preBuild.dependsOn('checkstyle')
}
//fine del task--> checkstyle
//Inserimento secondo task per findbugs
task findbugs(type: FindBugs) {

    ignoreFailures = false
    effort = "max"

    reportLevel = "low"
    // excludeFilter = new File("${project.rootDir}/app/config/findbugs/rulesFindBugs.xml")
    classes = files("${project.rootDir}/app/build")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"
        }
    }

    classpath = files()


}
//Fine Findbugs task

dependencies {
    /*
        Automatic MapsForge integration as described here:
        https://github.com/mapsforge/mapsforge/raw/master/docs/Integration.md
    */

    // MapsForge
    def mapsforgeVersion = '0.10.0'

    // MapsForge Core
    implementation "org.mapsforge:mapsforge-core:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-map:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-map-reader:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-themes:$mapsforgeVersion"
    implementation "net.sf.kxml:kxml2:2.3.0"

    // MapsForge Android
    implementation "org.mapsforge:mapsforge-map-android:$mapsforgeVersion"
    implementation 'com.caverock:androidsvg:1.3'

    // Acra
    def acraVersion = '5.1.3'
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"

    // Local
    implementation project(path: ':util-java')

}